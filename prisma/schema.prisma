generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String            @id @default(uuid())
  name               String
  firstName          String
  lastName           String
  phone              String
  email              String            @unique
  emailVerified      DateTime?
  image              String?
  userLogo           String?
  role               UserRole          @default(USER)
  password           String?
  plain              String?
  status             Boolean           @default(true)
  isVerified         Boolean           @default(false)
  token              Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  country            String?
  location           String?
  userId             String?
  companyDescription String?
  companyName        String?
  portfolioProfile   PortfolioProfile?
  subscriber         Subscriber[]
  accounts           Account[]
  guestProjects      GuestProject[]
  invoices           Invoice[]
  payments           Payment[]
  portfolioItems     PortfolioItem[]
  projects           Project[]
  sessions           Session[]
  modules            Module[]
  comments           ProjectComment[]
  folders            Folder[]
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(uuid())
  name      String
  type      String
  url       String
  size      Int
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Project {
  id             String           @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime?        @default(now())
  endDate        DateTime?
  isPublic       Boolean          @default(false)
  clientId       String
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  bannerImage    String?
  gradient       String?
  freeDomain     String?          @default("http://test.vercel.app")
  customDomain   String?          @default("http://test.app")
  notes          String?
  slug           String           @unique
  thumbnail      String?
  status         ProjectStatus    @default(ONGOING)
  budget         Int?             @default(0)
  deadline       Int?
  invoices       Invoice[]
  members        Member[]
  modules        Module[]
  payments       Payment[]        @relation("ProjectPayments")
  portfolioItems PortfolioItem[]  @relation("ProjectPortfolio")
  user           User             @relation(fields: [userId], references: [id])
  comments       ProjectComment[]
}

model ProjectComment {
  id        String   @id @default(uuid())
  content   String
  projectId String
  userName  String
  userRole  UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
}

model GuestProject {
  id           String   @id @default(uuid())
  projectLink  String
  projectName  String
  guestName    String
  projectOwner String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [guestId], references: [id])
  guestId      String
  ownerId      String
}

model PortfolioProfile {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  profileImage String?
  location     String
  projectCount Float
  email        String?
  bookingLink  String
  description  String
  twitterUrl   String?
  youtubeUrl   String?
  linkedinUrl  String?
  instagramUrl String?
  githubUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subscriber {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id        String   @id @default(uuid())
  name      String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  tasks     Task[]
}

enum TaskStatus {
  TODO
  INPROGRESS
  COMPLETE
}

model Task {
  id        String     @id @default(uuid())
  title     String
  status    TaskStatus @default(TODO)
  moduleId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  module    Module     @relation(fields: [moduleId], references: [id])
}

model Member {
  id        String   @id @default(uuid())
  name      String
  email     String
  role      String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  amount        Float
  tax           Float
  title         String
  status        String
  dueDate       DateTime
  projectId     String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  project       Project  @relation(fields: [projectId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  date          DateTime @default(now())
  method        String
  title         String
  projectId     String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  clientId      String
  invoiceNumber String   @unique
  tax           Float
  project       Project  @relation("ProjectPayments", fields: [projectId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model PortfolioItem {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  projectId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation("ProjectPortfolio", fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  CLIENT
  MEMBER
}

enum ProjectStatus {
  COMPLETE
  ONGOING
}

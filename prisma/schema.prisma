generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  CLIENT
  MEMBER
}

model User {
  id            String    @id @default(uuid())
  name          String
  firstName     String
  lastName      String
  phone         String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  userId        String?
  role          UserRole  @default(USER)
  password      String?
  country       String?
  location      String?
  status        Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  invoices      Invoice[]
  payments      Payment[]
  portfolioItems PortfolioItem[]
  isVerified    Boolean   @default(false)
  token         Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

enum ProjectStatus {
  COMPLETE
  ONGOING
}

model Project {
  id          String   @id @default(uuid())
  name        String
  slug        String @unique
  notes       String?
  description String?
  bannerImage String?
  thumbnail   String?
  budget      Int? @default(0)
  deadline    Int?
  startDate   DateTime? @default(now())
  endDate     DateTime?
  status      ProjectStatus @default(ONGOING)
  clientId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  modules     Module[] 
  members     Member[]
  invoices    Invoice[]
  commets     ProjectComment[]
  portfolioItems PortfolioItem[] @relation("ProjectPortfolio")
  payments    Payment[] @relation("ProjectPayments")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectComment {
  id String @id @default(uuid())
  content String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Module {
  id        String   @id @default(uuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String
  dueDate     DateTime?
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Member {
  id        String   @id @default(uuid())
  name      String
  email     String
  role      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  amount        Float
  status        String
  dueDate       DateTime
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  date      DateTime
  method    String
  project   Project  @relation("ProjectPayments", fields: [projectId], references: [id]) 
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PortfolioItem {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  projectUrl  String?
  project     Project  @relation("ProjectPortfolio", fields: [projectId], references: [id])
  projectId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
